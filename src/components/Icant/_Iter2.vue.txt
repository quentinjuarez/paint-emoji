<template>
  <div class="flex min-h-screen flex-col items-center justify-center bg-gray-900 p-4">
    <h1 class="mb-6 text-3xl font-bold">GIF Mask Overlay</h1>

    <div class="space-y-4">
      <!-- Input for base PNG file -->
      <div>
        <label class="mb-2 block font-semibold">Upload Base PNG</label>
        <input type="file" @change="handleBaseFile" accept="image/png" class="w-full" />
      </div>

      <!-- Input for GIF mask file -->
      <div>
        <label class="mb-2 block font-semibold">Upload GIF Mask</label>
        <input type="file" @change="handleGifFile" accept="image/gif" class="w-full" />
      </div>

      <!-- Generate Button -->
      <button
        @click="generateGif"
        :disabled="!baseImage || !gifMask"
        class="rounded bg-blue-500 px-4 py-2 text-white disabled:opacity-50"
      >
        Generate GIF
      </button>

      <div>
        <h2 class="mb-2 font-semibold">Frames:</h2>
        <div v-for="(frame, index) in frames" :key="index" class="mb-2">
          <img :src="frame" alt="Frame" />
        </div>
      </div>

      <!-- Preview generated GIF -->
      <div v-if="generatedGif" class="mt-4">
        <h2 class="mb-2 font-semibold">Generated GIF:</h2>
        <img :src="generatedGif" alt="Generated GIF" />
        <a
          :href="generatedGif"
          download="output.gif"
          class="mt-4 block rounded bg-green-500 px-4 py-2 text-center text-white"
        >
          Download GIF
        </a>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { ref } from 'vue'
import GIF from 'gif.js.optimized'
import omggif from 'omggif'

export default {
  setup() {
    const baseImage = ref<File | null>(null)
    const gifMask = ref<File | null>(null)
    const generatedGif = ref<string | null>(null)

    const frames = ref<string[]>([])

    // Handle base PNG file input
    const handleBaseFile = (event: Event) => {
      const files = (event.target as HTMLInputElement).files
      if (files && files.length) {
        baseImage.value = files[0]
      }
    }

    // Handle GIF mask file input
    const handleGifFile = (event: Event) => {
      const files = (event.target as HTMLInputElement).files
      if (files && files.length) {
        gifMask.value = files[0]
      }
    }

    // Function to generate GIF
    const generateGif = async () => {
      if (!baseImage.value || !gifMask.value) return

      const gifMaskData = await loadGifMask(gifMask.value)
      const baseImgElement = await loadAndResizeBaseImage(
        baseImage.value,
        gifMaskData.width,
        gifMaskData.height
      )

      const gif = new GIF({
        workers: 2,
        quality: 10,
        width: gifMaskData.width,
        height: gifMaskData.height
      })

      for (let i = 0; i < gifMaskData.numFrames(); i++) {
        const frameCanvas = document.createElement('canvas')
        frameCanvas.width = gifMaskData.width
        frameCanvas.height = gifMaskData.height
        const ctx = frameCanvas.getContext('2d')

        if (ctx) {
          // Clear the canvas
          ctx.clearRect(0, 0, gifMaskData.width, gifMaskData.height)

          // Draw resized base image on the canvas
          ctx.drawImage(baseImgElement, 0, 0, gifMaskData.width, gifMaskData.height)

          // generate a png frame without the canvas and then use drawImage
          const frameImageData = new ImageData(
            gifMaskData.getFrameRGBA(i),
            gifMaskData.width,
            gifMaskData.height
          )

          frames.value.push(frameCanvas.toDataURL())

          // Add frame to GIF
          console.log({ copy: true, delay: gifMaskData.getDelay(i) })
          gif.addFrame(ctx, { copy: true, delay: gifMaskData.getDelay(i) })
        }
      }

      gif.on('progress', (progress) => {
        console.log(`Rendering progress: ${(progress * 100).toFixed(2)}%`)
      })

      gif.on('error', (err: Error) => {
        console.error('GIF generation error:', err)
      })

      gif.on('finished', (blob: Blob) => {
        console.log('Generated GIF:', blob)
        const url = URL.createObjectURL(blob)
        generatedGif.value = url
      })

      gif.render()
    }

    // Utility function to load and resize the base PNG image
    const loadAndResizeBaseImage = (
      file: File,
      targetWidth: number,
      targetHeight: number
    ): Promise<HTMLImageElement> => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader()
        reader.onload = () => {
          const img = new Image()
          img.src = reader.result as string
          img.onload = () => {
            // Resize the base image to fit the GIF mask size while maintaining aspect ratio
            const canvas = document.createElement('canvas')
            const ctx = canvas.getContext('2d')
            canvas.width = targetWidth
            canvas.height = targetHeight

            // Calculate aspect ratio and draw base image proportionally
            const aspectRatio = img.width / img.height
            let drawWidth = targetWidth
            let drawHeight = targetHeight

            if (targetWidth / targetHeight > aspectRatio) {
              drawWidth = targetHeight * aspectRatio
            } else {
              drawHeight = targetWidth / aspectRatio
            }

            const xOffset = (targetWidth - drawWidth) / 2
            const yOffset = (targetHeight - drawHeight) / 2

            if (ctx) {
              ctx.clearRect(0, 0, targetWidth, targetHeight)
              ctx.drawImage(img, xOffset, yOffset, drawWidth, drawHeight)
            }

            const resizedImg = new Image()
            resizedImg.src = canvas.toDataURL()
            resizedImg.onload = () => resolve(resizedImg)
          }
        }
        reader.onerror = reject
        reader.readAsDataURL(file)
      })
    }

    // Utility function to load and process GIF mask
    const loadGifMask = (file: File): Promise<any> => {
      return new Promise((resolve, reject) => {
        const reader = new FileReader()
        reader.onload = () => {
          const buffer = new Uint8Array(reader.result as ArrayBuffer)
          const gifReader = new omggif.GifReader(buffer)
          resolve({
            width: gifReader.width,
            height: gifReader.height,
            numFrames: () => gifReader.numFrames(),
            getFrameRGBA: (index: number) => {
              const frame = new Uint8ClampedArray(gifReader.width * gifReader.height * 4)
              gifReader.decodeAndBlitFrameRGBA(index, frame)
              return frame
            },
            getDelay: (index: number) => gifReader.frameInfo(index).delay * 10
          })
        }
        reader.onerror = reject
        reader.readAsArrayBuffer(file)
      })
    }

    return {
      baseImage,
      gifMask,
      generatedGif,
      handleBaseFile,
      handleGifFile,
      generateGif,
      frames
    }
  }
}
</script>

<style scoped>
/* Add any custom styling if necessary */
</style>
