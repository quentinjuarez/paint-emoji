// import GIF from 'gif.js'

import { GifReader } from 'omggif'

const loadGifToArrayBuffer = (url: string): Promise<ArrayBuffer> => {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest()
    xhr.open('GET', url, true)
    xhr.responseType = 'arraybuffer'
    xhr.onload = () => {
      if (xhr.status === 200) {
        resolve(xhr.response)
      } else {
        reject(xhr.status)
      }
    }
    xhr.onerror = (err) => reject(err)
    xhr.send()
  })
}

const extractFrames = (buffer: ArrayBuffer) => {
  const byteArray = new Uint8Array(buffer)
  const gifReader = new GifReader(byteArray)
  const canvas = document.createElement('canvas')
  const ctx = canvas.getContext('2d')

  canvas.width = gifReader.width
  canvas.height = gifReader.height

  const frames = []

  // Loop through all frames in the GIF
  for (let i = 0; i < gifReader.numFrames(); i++) {
    const imageData = ctx?.createImageData(gifReader.width, gifReader.height)
    gifReader.decodeAndBlitFrameRGBA(i, imageData?.data as Uint8Array)
    ctx?.putImageData(imageData!, 0, 0)

    // Convert the canvas to a PNG and store it in the frames array
    frames.push(canvas.toDataURL('image/png'))
  }

  return frames
}

const extractGifFrames = async (url: string) => {
  const gif = await loadGifToArrayBuffer(url)
  return extractFrames(gif)
}

export default extractGifFrames
